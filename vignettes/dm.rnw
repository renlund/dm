%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{tools for data management documentation}
\documentclass{article}

<<'Setup', cache=FALSE, echo=FALSE, include=FALSE>>=
rm(list=ls())
library(dm)
## .load_only <- TRUE
## if(.load_only){
##     devtools::load_all()
## } else {
##     library(dm)
## }
set.seed(19790424)
if(FALSE){ ## create document
    knitr::knit2pdf('dm.rnw')
}
@

\title{dm}
\author{Henrik Renlund}
\newcommand{\code}{\texttt}

\begin{document}
\maketitle
\tableofcontents

\section{About}
\texttt{dm} is a package for functions relating to data management.

\newpage
\section{Documentation}
Sections \ref{sec:dm}, \ref{sec:dmf} and \ref{sec:dmd} deal with functions
relating to documentation of (certain aspects of) data management. These
functions all try to incorporate documentation as close to the actual code as
possible, so that when you change the code, the documentation should be there,
staring you in the face, demanding to be similarily updated. It is far from
clear how to do this efficiently\ldots

\subsection{\texttt{dm} and related functions}\label{sec:dm}

\subsubsection{The problem we want to solve}
A statistical report sometimes build an \emph{clinical data base} (CDB) from
multiple sources, collects variables that might need to be renamed and (if
categorical) recoded (and possibly transformed), the documentation of which is
\emph{significantly boring}.

The \texttt{dm} functions is an interactive-ish way of creating an CDB which
both inspects the chosen variables and ``documents'' the process.

\subsubsection{The elevator pitch}
\ldots assuming \LaTeX
\begin{enumerate}
\item point to variables (from possibly different sources), one at the time,
  with \verb|dm| (along with possible renaming, recoding and
  transformation). (Use \verb|dm_find| to look for candidate variables.) This
  gives a summary of the variable pointed to\footnote{Typically one wants to to
    this procedure anyway to sanity check all variables that are to be
    included.}, and the information is stored in a list somewhere.
  \item create the CDB by \verb|dm_create|.
  \item \label{da_point} get easy-to-print documentation of where variables came
    from (\verb|dm_doc2latex|) and what recodings have been done
    (\verb|dm_recode2latex|).
\end{enumerate}
So, the point really is to get (\ref{da_point}) ``for free'' in a way that is
connected to the creation of the CDB.

\subsubsection{The stuck-in-an-elevator pitch}
If most variables are picked form the same source, this can be set in options.
<<"no-eval-opts", echo = TRUE, eval = FALSE>>=
opts_dm$set('default_db' = 'MyDataBase')
@
If that is done, \texttt{dm} only needs a \texttt{var} argument, the name of the
var you want to add. But you can use
\begin{itemize}
  \item \verb|var|, name of variable in source
  \item \verb|name|, optional, if you want a new name for the variable (else it
    is set to \verb|var|)
  \item \verb|db|, name of data frame (or similar) where \verb|var| exists (else
    will look at the default location, if set)
  \item \verb|recode|, a list that specifies the recoding. This is the \verb|L|
    argument for the \verb|recode| function that this package provides (see the
    help for that functions)
  \item \verb|transf| a function for transforming (this might be something like
    a character-to-date function like \verb|ymd| from the lubridate package)
  \item \verb|comment| if you want to keep some comment about the variable
  \item \verb|label| if you want to give the variable a "label" (i.e. the value
    of the label attribute)
  \item \verb|keep.label| if \verb|var| already has a label in \verb|db|, should
    this be kept? (only if no \verb|label| is provided)
\end{itemize}
Then as \texttt{dm} is evaluated, information about the variable is printed (to
see range, levels and such).
<<"no-eval-dm", echo = TRUE, eval = FALSE>>=
dm(var = 'gEndEr', name = 'gender', label = "Perceived Gender")
    ## is followed by information being printed
@

The information about the options is stored in a list (by default "dm\_doc" in
an environment "dm\_envir").\footnote{This is due to it being poor practice to
  write to objects in the global environment, and we certainly can't have that.}
The key is the 'name' element, so as long as that is not changed, you can rerun
the function with new arguments if something went wrong
<<"no-eval-dm2", echo = TRUE, eval = FALSE>>=
dm('gEndEr', 'gender', label = "Biological Gender") ## overwrites
    ## the 'gender' entry
@
Else, kill all documentation and start again
<<"no-eval-dm3", echo = TRUE, eval = FALSE>>=
dm_doc(kill = TRUE, prompt = FALSE) ## or possibly kill only this
  ## entry dm:::dm_doc_set('gender', NULL)
@

The documentation can be accessed
<<"no-eval-doc", echo = TRUE, eval = FALSE>>=
myDoc <- dm_doc()
print(myDoc)  ## N.B not all information is printed
@

Once all variables are created you can either store the "documentation" (and
point to it later) or go on to create the CDB with \verb|dm_create|. Specify a
set if individuals (vector of id's) and, if necessary a vector of how
individuals are indentified in different data frames. If the \texttt{doc}
argument is not provided it will just look in \verb|dm_doc()|.
<<"no-eval-create", echo = TRUE, eval = FALSE>>=
id_key = c('MyDataBase' = 'id', 'Other1' = 'ID', 'Other2' = 'idno')
CDB <- dm_create(set = MyDataBase$id, id.name = id_key)
@

Now you have an CDB and you can print \verb|dm_doc()| to show where all
variables come from. You can get all recodings from
<<"no-eval-tables", echo = TRUE, eval = FALSE>>=
lapply(dm_doc(), FUN = function(x) x$recode_table)
@

There are also convience functions \verb|dm_recode2latex| and \verb|dm_doc2latex|
which will print all tables and documentation, respectively, in \LaTeX\,format.

\subsubsection{Toy Example}
We create some toy data
<<"create-data">>=
n <- 200
BL <- data.frame(
    id = structure(sprintf("id%d", 1:n),
                   label = "identification"),
    aalder = structure(round(rnorm(n, 50, 10)),
                       label = "Age at some time",
                       foo = 'whatever'),
    vikt = rpois(n, 50),
    gr = sample(c('A', 'A2', 'B', 'C', 'D', 'd1', 'unknown'),
                n, TRUE),
    koon = structure(sample(c('M', 'K'), n, T),
                     label = "The Sex"),
    nar = as.Date("2001-01-01") + runif(n, 0, 3650),
    stringsAsFactors = FALSE
)
BL$vikt[sample(1:n, 15)] <- NA
BL$gr[sample(1:n, 10)] <- NA
m <- .9*n
COMP <- data.frame(
    ID = structure(sample(BL$id, m),
                   label = "identification"),
    foo = rbinom(m, 1, .2),
    bar = structure(rexp(m, 1/150),
                    label = "Time passed")
)
@

There are some functions to help look for relevant variables.
<<"find">>=
db_info(BL) ## prints names and 'label' attributes
dm_find(pattern = 'time') ## looks in names and labels
@

Most variables of interest are in \verb|BL| so set this as default.
<<"default">>=
opts_dm$set('default_db' = 'BL')
@

Next, we add the first variable (and view the output). We've chosen a variable
with a fairly complex recoding to also illustrate the use of the \verb|recode|
argument (also see the help for the \verb|recode| function that is being
utilized). \verb|L| is a list where each entry has a vector of levels that will
aquire the name of that entry, where the order of entries will be the order of
the levels.
<<"add-gender">>=
## 'gr' will be recoded in a more complex way
L <- list('A' = 'A2',
          'B' = NULL, ## placeholder to get the order right
          'CD' = c('C', 'D', 'd1'),
          'Unknown' = c('unknown', NA))
## # this would also work:
## L <- list('A' = c('A', 'A2'),
##           'B' = 'B',
##           'CD' = c('C', 'D', 'd1', 'something not in data'),
##           'Unknown' = c('unknown', NA))
dm('gr', recode = L, label = 'Group')
@

Next, we add some more variables (but hide the output)
<<"add-rest", echo = TRUE, results = 'hide'>>=
dm('aalder', 'Age')
dm('nar', 'When', comment = "wtf?")
dm('foo', 'event', db = 'COMP',
   recode = list('No' = '0', 'Yes' = 1),
   label = "An event at some time")
dm('bar', 'time', db = 'COMP', transf = log)
dm('koon', 'Gender',
   recode = list('Male' = 'M', 'Female' = 'K'))
@
When we are done, we create the CDB with

<<"create">>=
CDB <- dm_create(set = BL$id,
                 id.name = c('BL' = 'id', 'COMP' = 'ID'))
db_info(CDB) ## look at what we've created
@

We can view, or get the information
<<"get-doc">>=
## myDoc <- dm_doc()
dm_doc() ## only prints partial information in the doc
@

You can store the information from the 'print' of the \verb|dm_doc()| and
the recodings with, respectively,
<<"variable-overview", eval = FALSE>>=
pdoc <- print(dm_doc(), print = FALSE)
rtables <- lapply(dm_doc(), FUN = function(x) x$recode_table)
@
and manipulate to output format of your choice.

If we are using \LaTeX, we can get the code for this with
<<"dm_doc2latex", results = 'asis'>>=
## dm_doc2latex(doc = myDoc)
dm_doc2latex(caption = "Variables and their origin.")
@
and all recode-information with
<<"recoded", results = 'asis'>>=
## dm_recode2latex(doc = myDoc)
dm_recode2latex()
@


\clearpage
\subsection{\texttt{dmf} and related functions}\label{sec:dmf}

\subsubsection{The problem we want to solve}
A clinical data base is sometimes filtered to get an \emph{analytical data
  base}, the documentation of which is, again, somewhat tedious. As with
\verb|dm|, we essentially want to do make the documentation parallell with
coding so it is easy to update if the coding is updated.

\subsubsection{Toy example continuation}
Now, \verb|dmf| plays the role of \verb|dm|.

<<"dmf">>=
dmf(f = CDB$gr != 'Unknown', name = 'crit_knowngr',
    comment = "group must be known")
dmf(f = CDB$Age >= 20 & CDB$Age <= 80, name = "crit_age",
    comment = "ages between 20 and 80")
dmf(f = CDB$When >= as.Date("2002-01-01") &
        CDB$When <= as.Date("2009-12-31"),
    name = "crit_date",
    comment = "study period 2002-2009")
@

Ok, lets look at the documentation. As with \verb|print.dm_doc| the print
method obscures the real structure of the object somewhat.
<<"dmf_doc">>=
dm_filter()
@

We see how many rows each criteria includes/excludes and the inclusion/exclusion
of these criteria when applied sequentially. We can change the order of the
sequence, by
<<"dmf_doc2">>=
print(dm_filter(), seq = c(2,3,1))
@


\subsubsection{Experimental functions}

Filter description via a list
<<"dmf-list", results = 'asis'>>=
dm_filter2latexlist()
@

Filter cluster description
<<"dmf-clust", fig.cap = "Test of cluster description">>=
dm_filter2dist(plot = TRUE)
@


\newpage
\subsection{\texttt{dmd} and related functions}\label{sec:dmd}

\subsubsection{The problem we want to solve}
A way to document derived variables\ldots

\subsubsection{Our best idea so far\ldots}
\ldots is to let derived variables be created via a function \texttt{dmd}, which
will pass given information to a list somewhere.

\vspace{.2cm}
\noindent\textbf{Failed ideas:}
\begin{itemize}
\item to assign new variables with an additional attribute containing
  information that can later be extracted. This fails in situations where the
  variables are created within some grouping operation (e.g. \texttt{dplyr}
  function \texttt{group\_by} in combination with \texttt{mutate}), where
  attributes tend to get dropped.
\item to modify \texttt{dm} to allow for any expression (not just redcoding) to
  be used to create new variables, but this will be hard to code when variables
  need to be created using some kind of grouping
\item to use some roxygen like notation for information on created variables,
  but this seems too unsatisfactory, as I want the information to be directly in
  the code (for some reason)
\end{itemize}

\subsubsection{Toy example}
Wrap derived variables in the \texttt{dmd} function and supply documentation therein
(i.e.\ give an explanatory text string to the \texttt{dmd} argument). Note that
the variable name also needs to be specified.

<<"dmd">>=
ADB <- subset(CDB, dmf_create())
ADB$age.gr <- dmd('age.gr',
                  expr = cut(x = ADB$Age, breaks = c(0, 65, Inf),
                             labels = c('young', 'old')),
                  dmd = 'Age groups, below 65 is young, else old.')
ADB$score <- with(ADB,
                  expr = dmd('score',
                             ifelse(gr %in% c('A', 'B') & Gender == 'Male', 1, 0),
                             dmd = 'A score, no sense required.'))
foo <- function(X){
    X$OrderInGroup <- dmd('OrderInGroup', expr = order(X$Age),
                          dmd = "The order of age within subgroup 'gr'.")
    X
}
ADB <- do.call(rbind, lapply(split(ADB, ADB$gr), foo))
@

Get the accumulated information
<<"dmd-show">>=
dm_derive()
@

\newpage
\section{\texttt{grepict}}
(\verb|grep| by \textbf{i}ndividual, (possibly) \textbf{c}onstrained by
\textbf{t}ime.)

\subsection{The problem we want to solve}
Suppose you have a set of units in a data set, and another data set where each
unit may occur none or serveral times, each row associated with a date and one
or more variables that contains some kind of information you want to search. For
each unit we want to find matches in this information, possibly within some
specified time range.

The function was specifically written to deal with this situation: the units are
selected to be part of some study cohort, possible with different start and end
times. Another data set exists which contains the medical records of (some
possibly larger) population. At least two tasks are commonly associated with
creating an analytical data base:
\begin{itemize}
\item Find the medical history of each individual, i.e.\ look for codes
  pertaining to different diagnosis that appear before the individual is entered
  into the cohort.
\item Find diagnosis that appear after the individual is entered into the study
  (and possibly before some end date).
\end{itemize}

\subsection{An example}
\subsubsection{Generate data}
Our cohort will consists of some individuals entering a study during the year
2010, with no longer than one year follow-up.
\begin{itemize}
\item Anna enters 2010-01-01, with no medical history or outcomes,
\item Barry enter 2010-02-01 (due to registered 'foo X' at this time), with a
  previous 'foo', but no outcome,
\item Christina enters 2010-03-01, with no medical history but a later 'bar',
\item David enters 2010-04-01, with a medical history of both 'bar' and 'foo',
  as well as a later 'quuz',
\item Esteban enters 2010-05-01 (due to registered 'foo Y' at this time), with
  no medical history and an outcome 'bar' \emph{after} the end of follow-up.
\end{itemize}
Moreover, the medical records are to be found in two different variables.
\newpage
<<'generate-data'>>=
POP <- data.frame(
    id = c('Anna', 'Barry', 'Christina',
           'David', 'Esteban'),
    enter = as.Date(c('2010-01-01', '2010-02-01', '2010-03-01',
                      '2010-04-01', '2010-05-01'))
)
RECORDS <- data.frame(
    identity = c('Barry', 'Barry',
                 'Christina',
                 'David', 'David', 'David',
                 'Esteban', 'Esteban',
                 'Other', 'Other'),
    what1 = c('headache', 'foo X',
              'bar type I',
              'nausea', 'percutaneous foo', 'quuz',
              '', 'enui',
              'other foo', 'other bar'),
    what2 = c('mild foo', NA,
              'bar type II',
              'severe bar', 'subcutaneous foo', NA,
              'bar-ish', 'foo Y',
              'yet other foo', 'yet other bar'),
    what.date = as.Date(c('2010-01-07', '2010-02-01',
                          '2010-07-23',
                          '1998-06-27', '1996-10-12', '2011-01-18',
                          '2011-05-03', '2010-05-01',
                          '1999-12-01', '2010-06-01'))
)
options('knitr.kable.NA' = '')
@

The data is tabulated below
<<'show-POP'>>=
POP
RECORDS
@

\subsubsection{Medical history}
Now we'll find the medical history of this cohort. We will need to point to the
relevant variables in the different data sets, in \verb|RECORDS| we need to
point to \verb|identity|, \verb|date| and \verb|what.date|. In \verb|POP| we
need to point to \verb|id| and specify the search interval 'begin' and 'end'.
In this case, we search as far back as we can, which will happen if we set
'begin' to \verb|NULL|. We'll search all the way until the beginning of the
study (which is coded in \verb|enter| in the data frame). Actually, we will
search strictly before \verb|enter| (so as to not confuse the reason for entry
into the study with medical history), by specifying
\verb|include = c(TRUE, FALSE)| which indicates that the lower bound is
inclusive, but he upper bound is not.

There are options for the output format, but typicall we want a \emph{stacked}
and \emph{long} format (which will be default).

<<'find-mh'>>=

searchString <- c('Foo' = 'foo', 'Bar' = 'bar', 'Quuz' = 'quuz')

tm <- grepict(
    pattern = searchString, ## what to search for
    x = c('what1', 'what2'), ## search variables in 'data'
    data = RECORDS, ## data set to search in
    id = 'identity', ## name of id variable in 'data'
    date = 'what.date', ## name of date variable in 'data'
    units = POP, ## data set, or vector, containing individuals
    units.id = 'id', ## name of id variable in 'units'
    begin = NULL, ## earliest date to search from
    end = 'enter', ## name of lates date to search
    include = c(TRUE, FALSE), ## include lower bound but not upper
    ## long = TRUE, ## long output format is default
    ## stack = TRUE, ## stacked results are default
    verbose = FALSE ## give calculation progression info?
)

@

\verb|grepict| will return a data frame with many variables and, with
this configuration, at least one row per individual and search string,
and possibly as many as one per search string times variable searched in.
Output (names are fixed):
\begin{itemize}
\item \verb|id| the identifier
\item \verb|begin| first date searched from
\item \verb|end| last date searched until
\item \verb|date| the date of the match
\item \verb|event| indicator for match
\item \verb|time| days between \verb|begin| and \verb|date|
\item \verb|match| that which matched
\item \verb|match.in| name of variable of match
\item \verb|pattern| pattern searched for
\item \verb|alias| name of pattern searched for
\item \verb|first.id| indicator for the first match for each individual and pattern
\item \verb|first.id_date| indicator for the first match for each individual, date and pattern
\end{itemize}

A few of these are tabulated below.

<<'show-mh'>>=
tm[, c('id', 'event', 'alias', 'match', 'match.in', 'first.id')]
@
\vspace{0.5cm}

For the history, we typically only care whether at least one instance of each
search term is found. Also, we might want to transform this to a wide format.

<<'mh-fix'>>=
tmp <- subset(tm, first.id == 1, select = c('id', 'event', 'alias'))
(medhist <- reshape(tmp, idvar = 'id',
                    timevar = c('alias'), direction = 'wide'))
names(medhist) <- gsub("event", "prior", names(medhist),
                       fixed = TRUE)
@

Now, we have a data frame containing the relevant medical history

<<'show-mh-fixed'>>=
medhist
@

\noindent\textbf{Using ustacked, wide output}\\
Unstacked output gives essentially gives the same information as a stacked
output, but with details for the first match and summary on all others (thus a
one row per individual \emph{and} search term). The wide output, which can only
be used for non-stacked results, turns the non-stacked data into a wide format
and gives each output variable name (which is not identical for each search
term) a suffix (the alias). For certain applications, this is a shortcut.

<<'find-mh-wide-unstacked'>>=
tmwu <- grepict(
    pattern = searchString, ## what to search for
    x = c('what1', 'what2'), ## search variables in 'data'
    data = RECORDS, ## data set to search in
    id = 'identity', ## name of id variable in 'data'
    date = 'what.date', ## name of date variable in 'data'
    units = POP, ## data set, or vector, containing individuals
    units.id = 'id', ## name of id variable in 'units'
    begin = NULL, ## earliest date to search from
    end = 'enter', ## name of lates date to search
    include = c(TRUE, FALSE), ## include lower bound but not upper
    long = FALSE, ## use wide output
    stack = FALSE, ## do not stack output
    verbose = FALSE ## give calculation progression info?
)
## tmwu contains 33 variables, only some of which are of interest
tmwu[, names(tmwu)[grepl('(id|event)', names(tmwu))]]
@

\subsubsection{Outcomes}
Next, we'll look at outcomes. Since the end of study is
variable, we'll have to create this variable, lets call it \verb|endofstudy|.
%% Note: if we want to start the search one day after \verb|enter| we'll have to
%% create this delayed start as a variable. Search dates are inclusive.

<<'find-outcomes'>>=

POP$endofstudy <- POP$enter + 365
tm2 <- grepict(pattern = searchString, x = c('what1', 'what2'),
               data = RECORDS, id = 'identity',
               date = 'what.date', units = POP, units.id = 'id',
               begin = 'enter', ## earliest date to search from
               end = 'endofstudy', ## name of latest date
               include = c(FALSE, TRUE), ## include upper but not lower bound
               verbose = FALSE)

@

For the outcomes, we probably care about more things, especially time-to-event.
The event and time variables now serve as right-censored data for each outcome.

<<'show-outcomes'>>=
tm2[, c('id', 'event', 'time', 'alias', 'match', 'match.in')]
@
\vspace{0.5cm}

We'll assume that we only care about the first instance of each outcome.

<<'outcomes-fix'>>=
tmp2 <- subset(tm2, first.id == 1,
               select = c('id', 'event', 'time', 'alias'))
(outcomes <- reshape(tmp2, idvar = 'id', timevar = c('alias'),
                     direction = 'wide'))
names(outcomes) <- gsub("event", "ev", names(outcomes), fixed = TRUE)
names(outcomes) <- gsub("time", "t", names(outcomes), fixed = TRUE)
@

Now, we have a data frame containing the relevant outcomes.

<<'show-outcomes-fixed'>>=
outcomes
@

\noindent\textbf{Other ways to get wide output}
As shown before, we can get wide output directly
<<'find-outcomes-wide-unstacked'>>=

POP$endofstudy <- POP$enter + 365
tm2wu <- grepict(pattern = searchString, x = c('what1', 'what2'),
               data = RECORDS, id = 'identity',
               date = 'what.date', units = POP, units.id = 'id',
               begin = 'enter', ## earliest date to search from
               end = 'endofstudy', ## name of latest date
               include = c(FALSE, TRUE), ## include upper but not lower bound
               long = FALSE, ## use wide output
               stack = FALSE, ## do not stack
               verbose = FALSE)
tm2wu[, names(tm2wu)[grepl('(id|event[^s]|time)', names(tmwu))]]

@


\clearpage
\subsection{Some details on wide and unstacked output}
%%I'm thinking\ldots maybe not use these?

\subsubsection{Wide and stacked}
With a wide, stacked output, we get one row per individual and search.  We get
some information on the first match - all information from the long stacked
format, except \verb|first.id| and \verb|first.id_date| - and some summary
information on all matches:
\begin{itemize}
\item \verb|events| which counts the matches,
\item \verb|matches| which concatenates the matches, and
\item \verb|matches.info| which stores a concatenation of
  \emph{match}:\emph{math.in}:\emph{date} for all matches.
\end{itemize}

<<'other'>>=
tm3 <- grepict(pattern = searchString, x = c('what1', 'what2'),
                  data = RECORDS, id = 'identity', date = 'what.date',
                  units = POP, units.id = 'id', begin = 'enter',
                  end = 'endofstudy',
                  long = FALSE, ## wide output format
                  stack = TRUE, ## stack
                  verbose = FALSE
)
str(tm3)
@

Also, selected info tabulated below.

<<'other-tab'>>=
val <- c('id', 'alias', 'event', 'time', 'events', 'matches.info')
tm3[, val]
@

\clearpage
\subsubsection{Wide and unstacked}
With a wide and unstacked output, we get all variables (from the wide stacked
output) \emph{for each search term} - except \verb|id|, \verb|begin| and \verb|end|
which are the same for all rows - with the name of the search term as suffix (or
a naming scheme if no names are supplied).

Below you can see the structure

<<'other2'>>=
tm4 <- grepict(pattern = searchString, x = c('what1', 'what2'),
               data = RECORDS, id = 'identity', date = 'what.date',
               units = POP, units.id = 'id', begin = 'enter',
               end = 'endofstudy',
               long = FALSE, ## wide output format
               stack = FALSE, ## don't stack
               verbose = FALSE
)
str(tm4)
@

Also, selected info on the Bar- and Quuz outcome tabulated.

<<'other2-tab'>>=
val <- c('id', names(tm4)[grepl("event|time", names(tm4))])
tm4[, val[!grepl("Foo", val)]]
@


\newpage
\section{Other functions}

\subsection{\texttt{cdate}}
\verb|cdate| is a function to handle dates of the form ``20010700'' or
``20010000'', which can appear as dates of death when the precise date is
unknown. If nothing else is known this function will replace an unknown
\begin{itemize}
\item day of the month with the midpoint of that month, and
\item month (and day) with the midpoint of that year.
\end{itemize}

Sometimes, there is another date for an individual when the individual was known
to be alive. In the applications of most interest to the author it is an
admission, or discharge, date to a hospital, and thus we believe that the
individual did \emph{not} die at the hospital (else the date of death would be
known), therefore the replacement date will be the midpoint of whatever remains
of the unknown period, e.g if we encounter date of death as ``20010100'' with a
known hospital discharge at 2001-01-21, we will interpret it as 2001-01-26.

Examples:
<<"cdate">>=
cdate(x = c("2001/01/01", "2001/01/00", "2001/00/00"), sep = "/")
cdate(x = c("20010101", "20010100", "20010000"),
      low.bound = as.Date(c("1999-01-01", "2001-01-21",
                            "2001-06-20")))
@




%% \clearpage
%% \section{Other functions}
%% Maybe some documentation will appear on
%% \begin{itemize}
%% \item \texttt{grepr}
%% \item \texttt{cdate}
%% \item \texttt{equal\_nchar}
%% \item \texttt{db\_table}
%% \end{itemize}

\end{document}
